// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proximo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageSourceClient is the client API for MessageSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageSourceClient interface {
	Consume(ctx context.Context, opts ...grpc.CallOption) (MessageSource_ConsumeClient, error)
}

type messageSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageSourceClient(cc grpc.ClientConnInterface) MessageSourceClient {
	return &messageSourceClient{cc}
}

func (c *messageSourceClient) Consume(ctx context.Context, opts ...grpc.CallOption) (MessageSource_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageSource_ServiceDesc.Streams[0], "/proximo.MessageSource/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSourceConsumeClient{stream}
	return x, nil
}

type MessageSource_ConsumeClient interface {
	Send(*ConsumerRequest) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageSourceConsumeClient struct {
	grpc.ClientStream
}

func (x *messageSourceConsumeClient) Send(m *ConsumerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSourceConsumeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageSourceServer is the server API for MessageSource service.
// All implementations should embed UnimplementedMessageSourceServer
// for forward compatibility
type MessageSourceServer interface {
	Consume(MessageSource_ConsumeServer) error
}

// UnimplementedMessageSourceServer should be embedded to have forward compatible implementations.
type UnimplementedMessageSourceServer struct {
}

func (UnimplementedMessageSourceServer) Consume(MessageSource_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}

// UnsafeMessageSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageSourceServer will
// result in compilation errors.
type UnsafeMessageSourceServer interface {
	mustEmbedUnimplementedMessageSourceServer()
}

func RegisterMessageSourceServer(s grpc.ServiceRegistrar, srv MessageSourceServer) {
	s.RegisterService(&MessageSource_ServiceDesc, srv)
}

func _MessageSource_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageSourceServer).Consume(&messageSourceConsumeServer{stream})
}

type MessageSource_ConsumeServer interface {
	Send(*Message) error
	Recv() (*ConsumerRequest, error)
	grpc.ServerStream
}

type messageSourceConsumeServer struct {
	grpc.ServerStream
}

func (x *messageSourceConsumeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSourceConsumeServer) Recv() (*ConsumerRequest, error) {
	m := new(ConsumerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageSource_ServiceDesc is the grpc.ServiceDesc for MessageSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proximo.MessageSource",
	HandlerType: (*MessageSourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _MessageSource_Consume_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proximo.proto",
}

// MessageSinkClient is the client API for MessageSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageSinkClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (MessageSink_PublishClient, error)
}

type messageSinkClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageSinkClient(cc grpc.ClientConnInterface) MessageSinkClient {
	return &messageSinkClient{cc}
}

func (c *messageSinkClient) Publish(ctx context.Context, opts ...grpc.CallOption) (MessageSink_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageSink_ServiceDesc.Streams[0], "/proximo.MessageSink/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSinkPublishClient{stream}
	return x, nil
}

type MessageSink_PublishClient interface {
	Send(*PublisherRequest) error
	Recv() (*Confirmation, error)
	grpc.ClientStream
}

type messageSinkPublishClient struct {
	grpc.ClientStream
}

func (x *messageSinkPublishClient) Send(m *PublisherRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSinkPublishClient) Recv() (*Confirmation, error) {
	m := new(Confirmation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageSinkServer is the server API for MessageSink service.
// All implementations should embed UnimplementedMessageSinkServer
// for forward compatibility
type MessageSinkServer interface {
	Publish(MessageSink_PublishServer) error
}

// UnimplementedMessageSinkServer should be embedded to have forward compatible implementations.
type UnimplementedMessageSinkServer struct {
}

func (UnimplementedMessageSinkServer) Publish(MessageSink_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

// UnsafeMessageSinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageSinkServer will
// result in compilation errors.
type UnsafeMessageSinkServer interface {
	mustEmbedUnimplementedMessageSinkServer()
}

func RegisterMessageSinkServer(s grpc.ServiceRegistrar, srv MessageSinkServer) {
	s.RegisterService(&MessageSink_ServiceDesc, srv)
}

func _MessageSink_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageSinkServer).Publish(&messageSinkPublishServer{stream})
}

type MessageSink_PublishServer interface {
	Send(*Confirmation) error
	Recv() (*PublisherRequest, error)
	grpc.ServerStream
}

type messageSinkPublishServer struct {
	grpc.ServerStream
}

func (x *messageSinkPublishServer) Send(m *Confirmation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSinkPublishServer) Recv() (*PublisherRequest, error) {
	m := new(PublisherRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageSink_ServiceDesc is the grpc.ServiceDesc for MessageSink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageSink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proximo.MessageSink",
	HandlerType: (*MessageSinkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _MessageSink_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proximo.proto",
}
